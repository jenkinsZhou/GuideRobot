package cn.tklvyou.guiderobot.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAV_LOCATION".
*/
public class NavLocationDao extends AbstractDao<NavLocation, Long> {

    public static final String TABLENAME = "NAV_LOCATION";

    /**
     * Properties of entity NavLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property X = new Property(2, float.class, "x", false, "X");
        public final static Property Y = new Property(3, float.class, "y", false, "Y");
        public final static Property Z = new Property(4, float.class, "z", false, "Z");
        public final static Property Rotation = new Property(5, float.class, "rotation", false, "ROTATION");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
    }


    public NavLocationDao(DaoConfig config) {
        super(config);
    }
    
    public NavLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAV_LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"X\" REAL NOT NULL ," + // 2: x
                "\"Y\" REAL NOT NULL ," + // 3: y
                "\"Z\" REAL NOT NULL ," + // 4: z
                "\"ROTATION\" REAL NOT NULL ," + // 5: rotation
                "\"CONTENT\" TEXT);"); // 6: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAV_LOCATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NavLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindDouble(3, entity.getX());
        stmt.bindDouble(4, entity.getY());
        stmt.bindDouble(5, entity.getZ());
        stmt.bindDouble(6, entity.getRotation());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NavLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindDouble(3, entity.getX());
        stmt.bindDouble(4, entity.getY());
        stmt.bindDouble(5, entity.getZ());
        stmt.bindDouble(6, entity.getRotation());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NavLocation readEntity(Cursor cursor, int offset) {
        NavLocation entity = new NavLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getFloat(offset + 2), // x
            cursor.getFloat(offset + 3), // y
            cursor.getFloat(offset + 4), // z
            cursor.getFloat(offset + 5), // rotation
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NavLocation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setX(cursor.getFloat(offset + 2));
        entity.setY(cursor.getFloat(offset + 3));
        entity.setZ(cursor.getFloat(offset + 4));
        entity.setRotation(cursor.getFloat(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NavLocation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NavLocation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NavLocation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
